/*
 * Copyright (c) 2014, Yawning Angel <yawning at schwanenlied dot me>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <array>

#include "schwanenlied/crypto/uniform_dh.h"
#include "gtest/gtest.h"

namespace schwanenlied {
namespace crypto {

class UniformDHTest : public ::testing::Test {
 protected:
  virtual void SetUp() {}
  virtual void TearDown() {}
};

// Test vectors that I generated for py-uniformdh
TEST_F(UniformDHTest, TestVectors) {
  /*
   * Test keypair x/X'
   *
   * The test vectors specify a x as ending with "... 756e", but we use "756f"
   * to force the public key used to be p - X.
   */
  const ::std::array<uint8_t, 192> x = { {
    0x6f, 0x59, 0x2d, 0x67, 0x6f, 0x53, 0x68, 0x74,
    0x74, 0x6f, 0x20, 0x68, 0x6e, 0x6b, 0x77, 0x6f,
    0x20, 0x73, 0x68, 0x74, 0x20, 0x65, 0x61, 0x67,
    0x65, 0x74, 0x20, 0x2e, 0x6f, 0x59, 0x2d, 0x67,
    0x6f, 0x53, 0x68, 0x74, 0x74, 0x6f, 0x20, 0x68,
    0x73, 0x69, 0x74, 0x20, 0x65, 0x68, 0x67, 0x20,
    0x74, 0x61, 0x2e, 0x65, 0x59, 0x20, 0x67, 0x6f,
    0x53, 0x2d, 0x74, 0x6f, 0x6f, 0x68, 0x68, 0x74,
    0x69, 0x20, 0x20, 0x73, 0x68, 0x74, 0x20, 0x65,
    0x65, 0x6b, 0x20, 0x79, 0x6e, 0x61, 0x20, 0x64,
    0x75, 0x67, 0x72, 0x61, 0x69, 0x64, 0x6e, 0x61,
    0x6f, 0x20, 0x20, 0x66, 0x68, 0x74, 0x20, 0x65,
    0x61, 0x67, 0x65, 0x74, 0x20, 0x2e, 0x61, 0x50,
    0x74, 0x73, 0x20, 0x2c, 0x72, 0x70, 0x73, 0x65,
    0x6e, 0x65, 0x2c, 0x74, 0x66, 0x20, 0x74, 0x75,
    0x72, 0x75, 0x2c, 0x65, 0x61, 0x20, 0x6c, 0x6c,
    0x61, 0x20, 0x65, 0x72, 0x6f, 0x20, 0x65, 0x6e,
    0x69, 0x20, 0x20, 0x6e, 0x6f, 0x59, 0x2d, 0x67,
    0x6f, 0x53, 0x68, 0x74, 0x74, 0x6f, 0x2e, 0x68,
    0x48, 0x20, 0x20, 0x65, 0x6e, 0x6b, 0x77, 0x6f,
    0x20, 0x73, 0x68, 0x77, 0x72, 0x65, 0x20, 0x65,
    0x68, 0x74, 0x20, 0x65, 0x6c, 0x4f, 0x20, 0x64,
    0x6e, 0x4f, 0x73, 0x65, 0x62, 0x20, 0x6f, 0x72,
    0x65, 0x6b, 0x74, 0x20, 0x72, 0x68, 0x75, 0x6f /* 0x6e */
  } };
  const ::std::array<uint8_t, 192> p_sub_X = { {
    0x76, 0xa3, 0xd1, 0x7d, 0x5c, 0x55, 0xb0, 0x3e,
    0x86, 0x5f, 0xa3, 0xe8, 0x26, 0x79, 0x90, 0xa7,
    0x24, 0xba, 0xa2, 0x4b, 0x0b, 0xdd, 0x0c, 0xc4,
    0xaf, 0x93, 0xbe, 0x8d, 0xe3, 0x0b, 0xe1, 0x20,
    0xd5, 0x53, 0x3c, 0x91, 0xbf, 0x63, 0xef, 0x92,
    0x3b, 0x02, 0xed, 0xcb, 0x84, 0xb7, 0x44, 0x38,
    0x3f, 0x7d, 0xe2, 0x32, 0xcc, 0xa6, 0xeb, 0x46,
    0xd0, 0x7c, 0xad, 0x83, 0xdc, 0xaa, 0x31, 0x7f,
    0xbe, 0xcb, 0xc6, 0x8c, 0xa1, 0x3e, 0x2c, 0x40,
    0x19, 0xe6, 0xa3, 0x65, 0x31, 0x06, 0x74, 0x50,
    0x04, 0xae, 0xcc, 0x0b, 0xe1, 0xdf, 0xf0, 0xa7,
    0x87, 0x33, 0xfb, 0x0e, 0x7d, 0x5c, 0xb7, 0xc4,
    0x97, 0xca, 0xb7, 0x7b, 0x13, 0x31, 0xbf, 0x34,
    0x7e, 0x5f, 0x3a, 0x78, 0x47, 0xaa, 0x0b, 0xc0,
    0xf4, 0xbc, 0x64, 0x14, 0x6b, 0x48, 0x40, 0x7f,
    0xed, 0x7b, 0x93, 0x1d, 0x16, 0x97, 0x2d, 0x25,
    0xfb, 0x4d, 0xa5, 0xe6, 0xdc, 0x07, 0x4c, 0xe2,
    0xa5, 0x8d, 0xaa, 0x8d, 0xe7, 0x62, 0x42, 0x47,
    0xcd, 0xf2, 0xeb, 0xe4, 0xe4, 0xdf, 0xec, 0x6d,
    0x59, 0x89, 0xaa, 0xc7, 0x78, 0xc8, 0x75, 0x59,
    0xd3, 0x21, 0x3d, 0x60, 0x40, 0xd4, 0x11, 0x1c,
    0xe3, 0xa2, 0xac, 0xae, 0x19, 0xf9, 0xee, 0x15,
    0x32, 0x50, 0x9e, 0x03, 0x7f, 0x69, 0xb2, 0x52,
    0xfd, 0xc3, 0x02, 0x43, 0xcb, 0xbc, 0xe9, 0xd0
  } };

  /* Test keypair y/Y */
  const ::std::array<uint8_t, 192> y = { {
    0x73, 0x65, 0x62, 0x20, 0x6f, 0x72, 0x65, 0x6b,
    0x74, 0x20, 0x72, 0x68, 0x75, 0x6f, 0x68, 0x67,
    0x6f, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x2c, 0x64,
    0x61, 0x20, 0x64, 0x6e, 0x77, 0x20, 0x65, 0x68,
    0x65, 0x72, 0x54, 0x20, 0x65, 0x68, 0x20, 0x79,
    0x68, 0x73, 0x6c, 0x61, 0x20, 0x6c, 0x72, 0x62,
    0x61, 0x65, 0x20, 0x6b, 0x68, 0x74, 0x6f, 0x72,
    0x67, 0x75, 0x20, 0x68, 0x67, 0x61, 0x69, 0x61,
    0x2e, 0x6e, 0x48, 0x20, 0x20, 0x65, 0x6e, 0x6b,
    0x77, 0x6f, 0x20, 0x73, 0x68, 0x77, 0x72, 0x65,
    0x20, 0x65, 0x68, 0x54, 0x79, 0x65, 0x68, 0x20,
    0x76, 0x61, 0x20, 0x65, 0x72, 0x74, 0x64, 0x6f,
    0x65, 0x20, 0x72, 0x61, 0x68, 0x74, 0x73, 0x27,
    0x66, 0x20, 0x65, 0x69, 0x64, 0x6c, 0x2c, 0x73,
    0x61, 0x20, 0x64, 0x6e, 0x77, 0x20, 0x65, 0x68,
    0x65, 0x72, 0x54, 0x20, 0x65, 0x68, 0x20, 0x79,
    0x74, 0x73, 0x6c, 0x69, 0x20, 0x6c, 0x72, 0x74,
    0x61, 0x65, 0x20, 0x64, 0x68, 0x74, 0x6d, 0x65,
    0x20, 0x2c, 0x6e, 0x61, 0x20, 0x64, 0x68, 0x77,
    0x20, 0x79, 0x6f, 0x6e, 0x6f, 0x20, 0x65, 0x6e,
    0x63, 0x20, 0x6e, 0x61, 0x62, 0x20, 0x68, 0x65,
    0x6c, 0x6f, 0x20, 0x64, 0x68, 0x54, 0x6d, 0x65,
    0x61, 0x20, 0x20, 0x73, 0x68, 0x54, 0x79, 0x65,
    0x74, 0x20, 0x65, 0x72, 0x64, 0x61, 0x0a, 0x2e
  } };
  const ::std::array<uint8_t, 192> Y = { {
    0xd0, 0x4e, 0x15, 0x6e, 0x55, 0x4c, 0x37, 0xff,
    0xd7, 0xab, 0xa7, 0x49, 0xdf, 0x66, 0x23, 0x50,
    0x1e, 0x4f, 0xf4, 0x46, 0x6c, 0xb1, 0x2b, 0xe0,
    0x55, 0x61, 0x7c, 0x1a, 0x36, 0x87, 0x22, 0x37,
    0x36, 0xd2, 0xc3, 0xfd, 0xce, 0x9e, 0xe0, 0xf9,
    0xb2, 0x77, 0x74, 0x35, 0x08, 0x49, 0x11, 0x2a,
    0xa5, 0xae, 0xb1, 0xf1, 0x26, 0x81, 0x1c, 0x9c,
    0x2f, 0x3a, 0x9c, 0xb1, 0x3d, 0x2f, 0x0c, 0x3a,
    0x7e, 0x6f, 0xa2, 0xd3, 0xbf, 0x71, 0xba, 0xf5,
    0x0d, 0x83, 0x91, 0x71, 0x53, 0x4f, 0x22, 0x7e,
    0xfb, 0xb2, 0xce, 0x42, 0x27, 0xa3, 0x8c, 0x25,
    0xab, 0xdc, 0x5b, 0xa7, 0xfc, 0x43, 0x01, 0x11,
    0x3a, 0x2c, 0xb2, 0x06, 0x9c, 0x9b, 0x30, 0x5f,
    0xaa, 0xc4, 0xb7, 0x2b, 0xf2, 0x1f, 0xec, 0x71,
    0x57, 0x8a, 0x9c, 0x36, 0x9b, 0xca, 0xc8, 0x4e,
    0x1a, 0x7d, 0xcf, 0x07, 0x54, 0xe3, 0x42, 0xf5,
    0xbc, 0x8f, 0xe4, 0x91, 0x74, 0x41, 0xb8, 0x82,
    0x54, 0x43, 0x5e, 0x2a, 0xba, 0xf2, 0x97, 0xe9,
    0x3e, 0x1e, 0x57, 0x96, 0x86, 0x72, 0xd4, 0x5b,
    0xd7, 0xd4, 0xc8, 0xba, 0x1b, 0xc3, 0xd3, 0x14,
    0x88, 0x9b, 0x5b, 0xc3, 0xd3, 0xe4, 0xea, 0x33,
    0xd4, 0xf2, 0xdf, 0xdd, 0x34, 0xe5, 0xe5, 0xa7,
    0x2f, 0xf2, 0x4e, 0xe4, 0x63, 0x16, 0xd4, 0x75,
    0x7d, 0xad, 0x09, 0x36, 0x6a, 0x0b, 0x66, 0xb3
  } };

  /* Shared secret x/Y, y/p - X */
  const ::std::array<uint8_t, 192> shared_secret = { {
    0x78, 0xaf, 0xaf, 0x5f, 0x45, 0x7f, 0x1f, 0xdb,
    0x83, 0x2b, 0xeb, 0xc3, 0x97, 0x64, 0x4a, 0x33,
    0x03, 0x8b, 0xe9, 0xdb, 0xa1, 0x0c, 0xa2, 0xce,
    0x4a, 0x07, 0x6f, 0x32, 0x7f, 0x3a, 0x0c, 0xe3,
    0x15, 0x1d, 0x47, 0x7b, 0x86, 0x9e, 0xe7, 0xac,
    0x46, 0x77, 0x55, 0x29, 0x2a, 0xd8, 0xa7, 0x7d,
    0xb9, 0xbd, 0x87, 0xff, 0xbb, 0xc3, 0x99, 0x55,
    0xbc, 0xfb, 0x03, 0xb1, 0x58, 0x38, 0x88, 0xc8,
    0xfd, 0x03, 0x78, 0x34, 0xff, 0x3f, 0x40, 0x1d,
    0x46, 0x3c, 0x10, 0xf8, 0x99, 0xaa, 0x63, 0x78,
    0x44, 0x51, 0x40, 0xb7, 0xf8, 0x38, 0x6a, 0x7d,
    0x50, 0x9e, 0x7b, 0x9d, 0xb1, 0x9b, 0x67, 0x7f,
    0x06, 0x2a, 0x7a, 0x1a, 0x4e, 0x15, 0x09, 0x60,
    0x4d, 0x7a, 0x08, 0x39, 0xcc, 0xd5, 0xda, 0x61,
    0x73, 0xe1, 0x0a, 0xfd, 0x9e, 0xab, 0x6d, 0xda,
    0x74, 0x53, 0x9d, 0x60, 0x49, 0x3c, 0xa3, 0x7f,
    0xa5, 0xc9, 0x8c, 0xd9, 0x64, 0x0b, 0x40, 0x9c,
    0xd8, 0xbb, 0x3b, 0xe2, 0xbc, 0x51, 0x36, 0xfd,
    0x42, 0xe7, 0x64, 0xfc, 0x3f, 0x3c, 0x0d, 0xdb,
    0x8d, 0xb3, 0xd8, 0x7a, 0xbc, 0xf2, 0xe6, 0x59,
    0x8d, 0x2b, 0x10, 0x1b, 0xef, 0x7a, 0x56, 0xf5,
    0x0e, 0xbc, 0x65, 0x8f, 0x9d, 0xf1, 0x28, 0x7d,
    0xa8, 0x13, 0x59, 0x54, 0x3e, 0x77, 0xe4, 0xa4,
    0xcf, 0xa7, 0x59, 0x8a, 0x41, 0x52, 0xe4, 0xc0
  } };

  // Key pair generation: x, p - X
  UniformDH ecks(x.data(), x.size());
  auto ecks_pub = ecks.public_key();
  ASSERT_EQ(p_sub_X.size(), ecks_pub.size());
  ASSERT_TRUE(memequals(ecks_pub.data(), p_sub_X.data(), p_sub_X.size()));

  // Key pair generation: y, p - Y
  UniformDH wai(y.data(), y.size());
  auto wai_pub = wai.public_key();
  ASSERT_EQ(Y.size(), wai_pub.size());
  ASSERT_TRUE(memequals(wai_pub.data(), Y.data(), Y.size()));

  // Shared secret generation
  ASSERT_TRUE(ecks.compute_key(reinterpret_cast<const uint8_t*>(wai_pub.data()),
                               wai_pub.size()));
  ASSERT_TRUE(wai.compute_key(reinterpret_cast<const uint8_t*>(ecks_pub.data()),
                               ecks_pub.size()));
  auto sekrit = ecks.shared_secret();
  ASSERT_EQ(0, sekrit.compare(wai.shared_secret()));
  ASSERT_EQ(shared_secret.size(), sekrit.size());
  ASSERT_TRUE(memequals(sekrit.data(), shared_secret.data(), shared_secret.size()));
}

TEST_F(UniformDHTest, SmokeTest) {
  for (int i = 0; i < 1024; i++) {
    UniformDH us;
    UniformDH them;

    ASSERT_TRUE(them.compute_key(reinterpret_cast<const uint8_t*>(us.public_key().data()),
                                 us.public_key().size()));
    ASSERT_TRUE(us.compute_key(reinterpret_cast<const uint8_t*>(them.public_key().data()),
                               them.public_key().size()));
    ASSERT_EQ(0, us.shared_secret().compare(them.shared_secret()));
  }
}

} // namespace crypto
} // namespace schwanenlied
